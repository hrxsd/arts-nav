<?xml version="1.0"?>
<launch>
  <!-- <include file="/home/jzian/WorkSpace/velodyne_driver/src/velodyne/velodyne_pointcloud/launch/VLP16_points.launch"/> -->

  <include file="$(find scout_bringup)/launch/scout_mini_robot_base.launch"/>

  <!-- arguments -->
  <arg name="nodelet_manager" default="velodyne_nodelet_manager" />
  <arg name="points_topic" default="/velodyne_points" />
  <!-- input clouds are transformed in odom_child_frame, and then localization is performed in that frame -->
  <!-- this is useful to match the LIDAR and IMU coodinate systems -->
  <arg name="odom_child_frame_id" default="velodyne" />
  <arg name="blind" default="0.03" />
  <arg name="outer" default="4.0" />

  <!-- optional arguments -->
  <arg name="use_imu" default="false" />
  <arg name="invert_imu_acc" default="false" />
  <arg name="invert_imu_gyro" default="false" />
  <arg name="use_global_localization" default="true" />
  <arg name="imu_topic" default="IMU_data" />
  <arg name="enable_robot_odometry_prediction" value="false" />
  <arg name="robot_odom_frame_id" value="base_link" />  
  <arg name="plot_estimation_errors" value="false" />
<!-- robot_odom_frame_id  odom ->  robot_link-->
  <include file="$(find hdl_global_localization)/launch/hdl_global_localization.launch" if="$(arg use_global_localization)" />

  <!-- in case you use velodyne_driver, comment out the following line -->
  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" />

    <!-- globalmap_server_nodelet -->
    <node pkg="nodelet" type="nodelet" name="globalmap_server_nodelet" args="load hdl_localization/GlobalmapServerNodelet $(arg nodelet_manager)">
    <!-- load PCD file -->

      <!-- <param name="globalmap_pcd" value="$(find hdl_localization)/config/map/map.pcd" /> -->
      <param name="globalmap_pcd" value="$(find mapping)/PCD/scans.pcd" />

 
      
      <!-- <param name="globalmap_pcd" value="/home/jzian/WorkSpace/hdl_localization/src/hdl_localization/config/map/map.pcd" /> -->
      
      <param name="convert_utm_to_local" value="true" />
      <param name="downsample_resolution" value="0.1" />
    </node>

    <!-- hdl_localization_nodelet -->
    <node pkg="nodelet" type="nodelet" name="hdl_localization_nodelet" args="load hdl_localization/HdlLocalizationNodelet $(arg nodelet_manager)">
      <remap from="/velodyne_points" to="$(arg points_topic)" />
      <remap from="/gpsimu_driver/imu_data" to="$(arg imu_topic)" />
      <!-- odometry frame_id -->
      <param name="odom_child_frame_id" value="$(arg odom_child_frame_id)" />
      <param name="blind" value="$(arg blind)" />
      <param name="outer" value="$(arg outer)" />
      <!-- imu settings -->
      <!-- during "cool_time", imu inputs are ignored -->
      <param name="use_imu" value="$(arg use_imu)" />
      <param name="invert_acc" value="$(arg invert_imu_acc)" />
      <param name="invert_gyro" value="$(arg invert_imu_gyro)" />
      <param name="cool_time_duration" value="2.0" />
      <!-- robot odometry-based prediction -->
      <param name="enable_robot_odometry_prediction" value="$(arg enable_robot_odometry_prediction)" />
      <param name="robot_odom_frame_id" value="$(arg robot_odom_frame_id)" />
      <!-- ndt settings -->
      <!-- available reg_methods: NDT_OMP, NDT_CUDA_P2D, NDT_CUDA_D2D-->
      <param name="reg_method" value="NDT_OMP" />
      <!-- if NDT is slow for your PC, try DIRECT1 serach method, which is a bit unstable but extremely fast -->
      <param name="ndt_neighbor_search_method" value="DIRECT7" />
      <param name="ndt_neighbor_search_radius" value="2.0" />
      <param name="ndt_resolution" value="1.0" />
      <param name="downsample_resolution" value="0.1" />
      <!-- if "specify_init_pose" is true, pose estimator will be initialized with the following params -->
      <!-- otherwise, you need to input an initial pose with "2D Pose Estimate" on rviz" -->
      <param name="specify_init_pose" value="true" />
      <param name="init_pos_x" value="0.0" />
      <param name="init_pos_y" value="0.0" />
      <param name="init_pos_z" value="0.0" />
      <param name="init_ori_w" value="1.0" />
      <param name="init_ori_x" value="0.0" />
      <param name="init_ori_y" value="0.0" />
      <param name="init_ori_z" value="0.0" />

      <param name="use_global_localization" value="$(arg use_global_localization)" />
    </node>

    <node pkg="hdl_localization" type="plot_status.py" name="plot_estimation_errors" if="$(arg plot_estimation_errors)" />
    <!-- IMU -->
    <node pkg = "serial_port" type="serial_imu" name="serial_imu" />
    <!-- rs_lidar -->
    <include file="$(find rslidar_sdk)/launch/start.launch"/>
    <!-- rs2velodyne -->
    <node pkg = "rs_to_velodyne" type="rs_to_velodyne" name="rs_to_velodyne" 
        args="XYZIRT XYZIRT"/>
    <!-- <include  file="$(find PUBR_description)/launch/PUBR_description.launch"/> -->
    <include file="$(find hdl_localization)/launch/haribit_move_base.launch" />

    <node pkg="tf" type="static_transform_publisher" name="base_to_velodyne_tf" args="0 0 0 0 0 0 base_link velodyne 100"/>
   

    
</launch>
